modifiers
{
right
middle
capture
once
passive
native
}

Object.freeze({})冻结对象

function containsSlotChild (el: ASTNode): boolean {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}


把自定义事件赋值给listeners,把浏览器原生事件data.nativeon赋值给data.on，
说明所有的原生浏览器是当前父组件环境处理的，而自定义事件，会把listeners作为vnode的componentoptions传入，放到子组件初始化阶段处理，
在子组件的初始化时候，拿到了父组件的listerners,然后执行initevents过程中，处理listeners



src/compiler/helpers.js 下面的addHandler 加符号！~&
src/core/vdom/helpers/update-listeners    normalizeEvent  去掉上面的符号，两者相反



options.delimiters?: [string, string]可以用来设置包裹变量的符号如%aaa%



//数组去重复三法
const res = []
for (let i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
       res.push(hooks[i])
    }
}
return res

var arr = [1,2,3,3,1,4];
[...new Set(arr)];
Array.from(new Set(arr)); 

[1, 2, 3].includes(2);



//是否对象
return Object.prototype.toString.call(obj) === '[object Object]'    



//复制对象类属性到新对象
function extend (to: Object, _from: ?Object): Object {
  for (const key in _from) {
    to[key] = _from[key]
  }
  return to
}



//默认模板包裹变量符号校验
const defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g
//自定义模板包裹变量符号校验
const buildRegex = cached(delimiters => {
  const open = delimiters[0].replace(regexEscapeRE, '\\$&')
  const close = delimiters[1].replace(regexEscapeRE, '\\$&')
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
})
//传入自定义模板包裹符号
const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE



//驼峰命名
export function cached<F: Function> (fn: F): F {
  const cache = Object.create(null)
  return (function cachedFn (str: string) {
    const hit = cache[str]
    return hit || (cache[str] = fn(str))
  }: any)
}
const camelizeRE = /-(\w)/g
export const camelize = cached((str: string): string => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')
})



//vm[key]代理vm._props.key
const sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: {},
  set: {}
}
export function proxy (target: Object, sourceKey: string, key: string) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  }
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}



//是否为type类型中一个
const simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/



//返回类型
function getType (fn) {
  const match = fn && fn.toString().match(/^\s*function (\w+)/)
  return match ? match[1] : ''
}



//匹配上了看看第一个匹配的位置
while ((match = tagRE.exec(text))) {
    index = match.index



//判断标签是否为其中之一
export function makeMap (
  str: string,
  expectsLowerCase?: boolean
): (key: string) => true | void {
  const map = Object.create(null)
  const list: Array<string> = str.split(',')
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true
  }
  return expectsLowerCase
    ? val => map[val.toLowerCase()]
    : val => map[val]
}
const isIgnoreNewlineTag = makeMap('script,style,textarea', true)
!isPlainTextElement(lastTag)



//处理属性值，去掉制表符或换行符（a标签的href属性也兼容）
const decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
}
const encodedAttr = /&(?:lt|gt|quot|amp|#39);/g
const encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g
function decodeAttr (value, shouldDecodeNewlines) {
  const re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr
  return value.replace(re, match => decodingMap[match])
}



//此为获取开始标签名
export const unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/
const ncname = `[a-zA-Z_][\\-\\.0-9_a-zA-Z${unicodeRegExp.source}]*`
const qnameCapture = `((?:${ncname}\\:)?${ncname})`
const startTagOpen = new RegExp(`^<${qnameCapture}`)



//匹配标签属性和动态属性
const attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/
const dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/



//方法名是否以_或$开头
export function isReserved (str: string): boolean {
  const c = (str + '').charCodeAt(0)
  return c === 0x24 || c === 0x5F
}



//以下为绑定函数到vm，兼容写法
function polyfillBind (fn: Function, ctx: Object): Function {
  function boundFn (a) {
    const l = arguments.length
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  boundFn._length = fn.length
  return boundFn
}
function nativeBind (fn: Function, ctx: Object): Function {
  return fn.bind(ctx)
}
export const bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind



//此为服务端渲染环境判断，!isServerRendering 为非服务端渲染环境
let _isServer
export const isServerRendering = () => {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server'
    } else {
      _isServer = false
    }
  }
  return _isServer
}



//复制函数的正确方式
function.call(this,this)



//空函数
function noop (a?: any, b?: any, c?: any) {}
console.log('new: %s, old: %s', val, oldVal)



//解析a.b.c
const segments = path.split('.')
  return function (obj) {
    for (let i = 0; i < segments.length; i++) {
      if (!obj) return
      obj = obj[segments[i]]
    }
    return obj
  }



//这是带默认值的
 (text: string = '') => {



//判断是否为对象
export function isObject (obj: mixed): boolean %checks {
  return obj !== null && typeof obj === 'object'
}



//如果深度遍历一个对象的内部元素，并收集起来
function _traverse (val: any, seen: SimpleSet) {
    if(seen.has(depId)){
	return 
    }
   seen.add(depId)
   let i, keys
  if (Array.isArray(val)) {
    i = val.length
    while (i--) _traverse(val[i], seen)
  } else {
    keys = Object.keys(val)
    i = keys.length
    while (i--) _traverse(val[keys[i]], seen)
  }
}



//判断是否为原始类型
export function isPrimitive (value: any): boolean %checks {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}



//判断是否为undefined或者null
export function isUndef (v: any): boolean %checks {
  return v === undefined || v === null
}



//判断值是否为数组的有效索引
export function isValidArrayIndex (val: any): boolean {
  const n = parseFloat(String(val))
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}
isFinite（val）是否为无穷数，true为有限数字



//判断对象的基本属性中是否有该属性
const hasOwnProperty = Object.prototype.hasOwnProperty
export function hasOwn (obj: Object | Array<*>, key: string): boolean {
  return hasOwnProperty.call(obj, key)
}



//这是输入数组和开始位置，返回相应数组
function toArray (list: any, start?: number): Array<any> {
  start = start || 0
  let i = list.length - start
  const ret: Array<any> = new Array(i)
  while (i--) {
    ret[i] = list[i + start]
  }
  return ret
}



//检查浏览器是否支持原生函数
export function isNative (Ctor: any): boolean {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}